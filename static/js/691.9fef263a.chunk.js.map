{"version":3,"file":"static/js/691.9fef263a.chunk.js","mappings":"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","sources":["pages/Movies/Movies.styled.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["import styled from 'styled-components'\nimport { Link } from 'react-router-dom';\n\nexport const StyledLink = styled(Link)`\n  color: black;\n  text-decoration: none;\n  font-size: 24px;\n  font-weight: 500;\n\n  &:hover,\n  &:focus {\n    color: yellowgreen;\n  }\n`;\n\nexport const MovieContainer = styled.div`\n  margin-left: 10px;\n`;\n\nexport const MovieForm = styled.form`\n  display: flex;\n  margin-top: 20px;\n`;\n\nexport const MovieBtn = styled.button`\n  border: none;\n  font-size: 18px;\n  font-weight: 500;\n  padding: 5px 10px;\n`;\n\nexport const MovieInput = styled.input`\n  font-size: 18px;\n`;\n\nexport const MovieList = styled.ul`\n  margin-top: 15px;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\n","import { useSearchParams, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { useState, useEffect } from 'react';\nimport { getMovieByQuery } from 'api/api';\nimport { StyledLink, MovieContainer, MovieForm, MovieBtn, MovieInput, MovieList } from './Movies.styled';\n\n\nfunction Movies() {\n  const [inputValue, setInputValue] = useState('');\n  const [status, setStatus] = useState('idle');\n  const [movieResp, setMovieResp] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const movieQuery = searchParams.get('query') ?? '';\n  const location = useLocation();\n\n  useEffect(() => {\n    const fetchMovieByQuery = () => {\n      if (movieQuery === '') {\n        return;\n      }\n      setStatus('pending');\n      getMovieByQuery(movieQuery)\n        .then(res => {\n          if (res.length !== 0) {\n            setMovieResp(res);\n            setStatus('resolved');\n          } else {\n            setStatus('rejected');\n            throw new Error('we dont find any reviews');\n          }\n        })\n        .catch(error => {\n          console.log(error.message);\n        });\n    };\n    fetchMovieByQuery();\n  }, [searchParams, movieQuery]);\n\n  const onInputValue = evt => {\n    setInputValue(evt.target.value);\n  };\n\n  const onSubmit = evt => {\n    evt.preventDefault();\n    updateQueryUrl(evt.target.elements.query.value);\n    setInputValue('');\n  };\n\n  const updateQueryUrl = query => {\n    const nextParams = query !== '' ? { query } : {};\n    setSearchParams(nextParams);\n  };\n\n  return (\n    <MovieContainer>\n      <MovieForm onSubmit={onSubmit}>\n        <MovieInput\n          autoComplete=\"true\"\n          onChange={onInputValue}\n          name=\"query\"\n          value={inputValue}\n        ></MovieInput>\n        <MovieBtn type=\"submit\">\n          search\n        </MovieBtn>\n      </MovieForm>\n      <MovieList>\n        {status === 'resolved' &&\n          movieResp.map(({ title, original_title, id }) => (\n            <StyledLink\n              to={`/movies/${id}`}\n              state={{ from: location }}\n              key={id}\n            >\n              <p>{title || original_title}</p>\n            </StyledLink>\n          ))}\n        {status === 'pending' && <p>Loading...</p>}\n        {status === 'rejected' && <p>We don't find any movie</p>}\n      </MovieList>\n    </MovieContainer>\n  );\n}\n\nStyledLink.propTypes = {\n  to: PropTypes.string.isRequired,\n};\n\nexport default Movies;\n"],"names":["StyledLink","styled","Link","_templateObject","_taggedTemplateLiteral","MovieContainer","_templateObject2","MovieForm","_templateObject3","MovieBtn","_templateObject4","MovieInput","_templateObject5","MovieList","_templateObject6","propTypes","to","PropTypes","_searchParams$get","_useState","useState","_useState2","_slicedToArray","inputValue","setInputValue","_useState3","_useState4","status","setStatus","_useState5","_useState6","movieResp","setMovieResp","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","setSearchParams","movieQuery","get","location","useLocation","useEffect","getMovieByQuery","then","res","length","Error","catch","error","console","log","message","updateQueryUrl","query","_jsxs","children","onSubmit","evt","preventDefault","target","elements","value","_jsx","autoComplete","onChange","name","type","map","_ref","title","original_title","id","concat","state","from"],"sourceRoot":""}